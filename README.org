* Preamble

This is an implementation of /parse-quote/, part of the developer application
for Tsuru Capital.

To compile (assumes ~stack~, no ~.cabal~ is committed on purpose):

#+BEGIN_SRC bash
  stack build
#+END_SRC

Usage:

#+BEGIN_EXAMPLE
  Usage: parse-quote [-r] FILE

  Available options:
    -r                       Order output by 'quote accept time'
    -h,--help                Show this help text
#+END_EXAMPLE

Example:

#+BEGIN_EXAMPLE
stack exec -- parse-quote mdf-kospi200.20110216-0.pcap
#+END_EXAMPLE

* Details

** Streaming

Writing a custom parser for the Quote Packet Specification was straight-forward
enough with ~attoparsec~. ~hexl-mode~ from Emacs is always quite handy for
debugging these.

I've written [[http://hackage.haskell.org/package/streaming-osm][streaming byte parsers]] before, so when I saw this:

#+BEGIN_QUOTE
It is particularly important that your program runs just as efficiently on a
small file as it does on a large file
#+END_QUOTE

I immediately thought to reach for the ~streaming~ library's integration with ~attoparsec~.
This proved fruitful and much faster than the "native" solution provided by the
existing [[http://hackage.haskell.org/package/pcap][pcap]] library.

I wrote and published [[http://hackage.haskell.org/package/streaming-pcap][streaming-pcap]], which made ~parse-quote~ nice to write.

** Output Order (~-r~)

It wasn't sufficient to consider the Accept Times of just two adjacent Quotes -
an entire three second block of them had to be considered. Here I use a Priority
Queue from [[http://hackage.haskell.org/package/pqueue/][pqueue]] to order the quotes for me automatically. Only when an incoming
~Quote~ arrived three seconds later than the min of the queue do we finally pop
it and stream that min.

Since the window is limited to three seconds, we can expect that the Priority Queue
won't consume much memory. Thousands of quotes may appear in three seconds, but
certainly not millions.

** Time

The Packet Arrival time and Quote Accept time differ by nine hours.
Otherwise ignoring the hour, they typically differ by only a few tens-of-milliseconds.
Given this and the fact that Japan is nine hours ahead of UTC convinced me that
the hour discrepancy wasn't imporant for this exercise and was thus left as-is.

** Performance

On my machine, ~parse-quote~ prints the tests in about one second without ~-r~,
and in about 15 seconds with ~-r~.
